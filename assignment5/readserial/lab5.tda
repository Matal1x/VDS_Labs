`define true 1
`include "tidal.sv"

module readserial_properties(clk, reset_n, rxd, data, valid, state_s, data_i, cnt_s, cnt_en);
    input logic clk;
    input logic reset_n;
    input logic rxd;
    input logic [7:0] data;
    input logic valid;
    input logic state_s;
    input logic [7:0] data_i;
    input shortint unsigned cnt_s;
    input logic cnt_en;


    parameter IDLE = 1'b0;
    parameter READ_DATA = 1'b1;


    `begin_tda(ops)

    sequence reset_sequence;
	reset_n == 1'b0;
	endsequence
property reset;
reset_sequence |=>
t ##0 state_s == IDLE and
t ##0 valid == 1'b0;
endproperty;
a_reset: assert property(@(posedge clk) reset); // Add '@(posedge clk)' for the completeness check or else it will fail
    // TASK3
    property stay_in_idle;
        t ##0 state_s == IDLE and
        t ##0 rxd==1 
            implies
        t ##1 state_s == IDLE and
	t ##1 valid==0;
    endproperty
    a_stay_in_idle: assert property(@(posedge clk) disable iff (reset_n==0) stay_in_idle);

    // TASK4
    property read_byte;
        logic temp7;
        logic temp6;
        logic temp5;
        logic temp4;
        logic temp3;
        logic temp2;
        logic temp1;
        logic temp0; 

        t ##0 state_s == IDLE and
        t ##0 rxd==0 and // Start bit 

        //t##0 in_idle_counter_is_0 and // TASK5
        //t##0 in_idle_counter_not_enabled and // ----

        t ##1 set_freeze(temp7, rxd) and // MSB first
        t ##2 set_freeze(temp6, rxd) and
        t ##3 set_freeze(temp5, rxd) and
        t ##4 set_freeze(temp4, rxd) and
        t ##5 set_freeze(temp3, rxd) and
        t ##6 set_freeze(temp2, rxd) and
        t ##7 set_freeze(temp1, rxd) and
        t ##8 set_freeze(temp0, rxd) 

	//and

        //t ##9 rxd // No immediate new transmission

            implies

        t ##1  state_s == READ_DATA [*8] and
        t ##1 !valid [*8] and

        t ##9 data == {temp7, temp6, temp5, temp4, temp3, temp2, temp1, temp0} and
        t ##9 valid and
        t ##9 state_s == IDLE;
    endproperty
    a_read_byte: assert property(@(posedge clk) disable iff (reset_n==0) read_byte);

    // TASK5
    /*
        To set the solver:  source pure_ipc.tcl
        to undo:  set_check_option â€“default
    */

    sequence in_idle_counter_is_0;
         (!(state_s == IDLE)) or cnt_s==0;
    endsequence
    sequence in_idle_counter_not_enabled;
        (!(state_s == IDLE)) or !cnt_en;
    endsequence

	

    
    // TASK6
    property in_idle_counter_not_enabled__step;
        t ##0 in_idle_counter_not_enabled 
            implies
        t ##1 in_idle_counter_not_enabled;
    endproperty
    //a_in_idle_counter_not_enabled__step: assert property(@(posedge clk) disable iff (reset_n==0) in_idle_counter_not_enabled__step);

    property in_idle_counter_not_enabled__base;
        t ##0 reset_sequence
            implies
        t ##0 in_idle_counter_not_enabled; // reset is asynchronus so we should check at the same t
    endproperty
    //a_in_idle_counter_not_enabled__base: assert property(@(posedge clk) in_idle_counter_not_enabled__base);

    
    // TASK7
    parameter n = 1; // with the optional part
    // parameter n = 2; // the actual task

    property in_idle_counter_is_0__step;
        t ##0 in_idle_counter_is_0  [*n]
        // with The optional part
	and t ##0 in_idle_counter_not_enabled
	and t##0 in_read_counter_enabled
        // -----------------------------
            implies
        t ##n in_idle_counter_is_0;
    endproperty
    //a_in_idle_counter_is_0__step: assert property(@(posedge clk) disable iff (reset_n==0) in_idle_counter_is_0__step);

    property in_idle_counter_is_0__base;
        t ##0 reset_sequence
            implies
        t ##0 in_idle_counter_is_0 [*n];
    endproperty
    //a_in_idle_counter_is_0__base: assert property(@(posedge clk) in_idle_counter_is_0__base);

    // OPTIONAL
    sequence in_read_counter_enabled;
		!(state_s == READ_DATA) or cnt_en;
	endsequence

    property in_read_counter_enabled__step;
        t ##0 in_read_counter_enabled 
            implies
        t ##1 in_read_counter_enabled;
    endproperty
    //a_in_read_counter_enabled__step: assert property(@(posedge clk) disable iff (reset_n==0) in_read_counter_enabled__step);

    property in_read_counter_enabled__base;
        t ##0 reset_sequence
            implies
        t ##0 in_read_counter_enabled; // reset is asynchronus so we should check at the same t
    endproperty
    //a_in_read_counter_enabled__base: assert property(@(posedge clk) in_read_counter_enabled__base);


    `end_tda
    
endmodule

bind readserial readserial_properties inst_readserial_properties (.*);